export function define(t){let e=t.is;customElements.get(e)?console.warn("Already registered "+e):customElements.define(e,t)}export const disabled="disabled";export function XtallatX(t){return class extends t{constructor(){super(...arguments),this._evCount={}}static get observedAttributes(){return[disabled]}get disabled(){return this._disabled}set disabled(t){this.attr(disabled,t,"")}attr(t,e,s){this[(e?"set":"remove")+"Attribute"](t,s||e)}to$(t){const e=t%2;return(t-e)/2+"-"+e}incAttr(t){const e=this._evCount;t in e?e[t]++:e[t]=0,this.attr("data-"+t,this.to$(e[t]))}attributeChangedCallback(t,e,s){switch(t){case disabled:this._disabled=null!==s}}de(t,e,s){const a=t+(s?"":"-changed"),r=new CustomEvent(a,{detail:e,bubbles:!0,composed:!1});return this.dispatchEvent(r),this.incAttr(a),r}_upgradeProperties(t){t.forEach(t=>{if(this.hasOwnProperty(t)){let e=this[t];delete this[t],this[t]=e}})}}}import{XtallatX}from"xtal-latx/xtal-latx.js";import{define}from"xtal-latx/define.js";export class TextScramble extends(XtallatX(HTMLElement)){constructor(){super(),this.chars="!<>-_\\/[]{}â€”=+*^?#________",this.update=this.update.bind(this)}static get is(){return"co-depends-text-scramble"}static get observedAttributes(){return super.observedAttributes.concat(["text"])}connectedCallback(){this._upgradeProperties(["text"])}attributeChangedCallback(t,e,s){switch(super.attributeChangedCallback(t,e,s),t){case"text":this._text=s,this.setText(e,s)}}get text(){return this._text}set text(t){this.attr("text",t)}setText(t,e){null===t&&(t="");const s=Math.max(t.length,e.length);this.queue=[];for(let a=0;a<s;a++){const s=t[a]||"",r=e[a]||"",i=Math.floor(40*Math.random()),n=i+Math.floor(40*Math.random());this.queue.push({from:s,to:r,start:i,end:n})}cancelAnimationFrame(this.frameRequest),this.frame=0,this.update()}update(){let t="",e=0;for(let s=0,a=this.queue.length;s<a;s++){let{from:a,to:r,start:i,end:n,char:h}=this.queue[s];this.frame>=n?(e++,t+=r):this.frame>=i?((!h||Math.random()<.28)&&(h=this.randomChar(),this.queue[s].char=h),t+=`<span class="dud">${h}</span>`):t+=a}this.innerHTML=t,e===this.queue.length?this.de("text-setting-complete",{},!0):(this.frameRequest=requestAnimationFrame(this.update),this.frame++)}randomChar(){return this.chars[Math.floor(Math.random()*this.chars.length)]}}define(TextScramble);